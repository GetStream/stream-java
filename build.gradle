plugins {
    id 'java-library'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'com.diffplug.spotless' version '5.14.0'
}

group 'io.getstream.client'
version = '3.6.2'
description = 'Stream Feeds official Java SDK'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url uri('https://repo.maven.apache.org/maven2/') }
}

dependencies {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.pholser:junit-quickcheck-core:0.8.1'
    testImplementation 'com.pholser:junit-quickcheck-generators:0.8.1'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.2.0'

    implementation 'com.google.guava:guava:20.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.10'
    implementation 'com.auth0:java-jwt:3.4.0'

    api 'net.sourceforge.streamsupport:streamsupport:1.7.0'
    api 'net.sourceforge.streamsupport:streamsupport-cfuture:1.7.0'
}

def localProperties = new Properties()
def localPropertiesFile = project.rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    FileInputStream stream = new FileInputStream(localPropertiesFile)
    localProperties.load(stream)
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
        events 'standard_out', 'standard_error', "passed", "skipped", "failed"
    }

    doFirst {
        // Inject local properties into tests runtime system properties
        for (String key : localProperties.stringPropertyNames) {
            systemProperty key, localProperties.getProperty(key).toString()
        }
    }
}

def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}
spotless {
    java {
        googleJavaFormat()
    }
}
task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties

apply from: "publish.gradle"
